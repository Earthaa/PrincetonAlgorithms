import edu.princeton.cs.algs4.*;
public class KdTree {
	   private static class Node
	   {
		   private Point2D p;
		   private RectHV rect;
		   private int layer;
		   private Node lb;
		   private Node rt;
		   private Node(Point2D myPoint,RectHV myrect)
		   {
			   p = myPoint;
			   rect = myrect;
		   }
		   private int compareTo(Node that)
		   {
			   if(layer % 2 == 1)
			   {
				   if(p.x() )
			   }
		   }
	   }
	   private Node root = null;
	   private int size;
	   public KdTree()
	   {
		   size = 0;
		   root = null;
	   }// construct an empty set of points 
	   public boolean isEmpty()
	   {
		   return size == 0;
			   
	   }// is the set empty? 
	   public int size()
	   {
		   return size;
	   }// number of points in the set 
	   public void insert(Point2D p) 
	   {
		   if(p == null)
			   throw new java.lang.IllegalArgumentException();
		   if(isEmpty())
		   {
			   RectHV tmprect = new RectHV(0.0,0.0,1.0,1.0);
			   root = new Node(p,tmprect);
			   return;
		   }
		   
	   }// add the point to the set (if it is not already in the set)
	   public boolean contains(Point2D p)         // does the set contain point p? 
	   public void draw()                         // draw all points to standard draw 
	   public Iterable<Point2D> range(RectHV rect)             // all points that are inside the rectangle (or on the boundary) 
	   public Point2D nearest(Point2D p)             // a nearest neighbor in the set to point p; null if the set is empty 

	   public static void main(String[] args)                  // unit testing of the methods (optional) 
}
