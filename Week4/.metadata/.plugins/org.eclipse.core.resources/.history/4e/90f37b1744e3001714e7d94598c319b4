import edu.princeton.cs.algs4.*;
public class KdTree {
	   private static class Node
	   {
		   private Point2D p;
		   private RectHV rect;
		   private int layer;
		   private Node lb;
		   private Node rt;
		   private Node(Point2D myPoint,RectHV myrect)
		   {
			   p = myPoint;
			   rect = myrect;
		   }
		   private Node(Point2D myPoint)
		   {
			   p = myPoint;
		   }
		   private int compareTo(Node that)
		   {
			   if(p.x()==that.p.x()&&p.y()==that.p.y())
				   return 0;
			   if(layer % 2 == 1)
			   {
				   if(p.x()<that.p.x())
					   return -1;
				   else
					   return 1;
			   }
			   else
			   {
				   if(p.y()<that.p.y())
					   return -1;
				   else 
					   return 1;
			   }
		   }
	   }
	   private Node root = null;
	   private int size;
	   private Point2D nearestPoint = null;
	   private double distanceSquared = Double.MIN_VALUE;
	   public KdTree()
	   {
		   size = 0;
		   root = null;
	   }// construct an empty set of points 
	   public boolean isEmpty()
	   {
		   return size == 0;
			   
	   }// is the set empty? 
	   public int size()
	   {
		   return size;
	   }// number of points in the set 
	   private Node find(Node newPoint,Node x)
	   {
		   int cmp = x.compareTo(newPoint);
		   if(cmp == 1)
		   {
			   if(x.lb!=null)
				   return find(newPoint, x.lb);
			   else
				   return x;				   
		   }
		   else if(cmp == -1)
		   {
			   if(x.rt!=null)
				   return find(newPoint,x.rt);
			   else
				   return x;
		   }
		   return x;
	   }
	   public void insert(Point2D p) 
	   {
		   if(p == null)
			   throw new java.lang.IllegalArgumentException();
		   if(isEmpty())
		   {
			   RectHV tmprect = new RectHV(0.0,0.0,1.0,1.0);
			   root = new Node(p,tmprect);
			   root.layer = 1;
			   this.size = 1;
			   return;
		   }
		   Node newPoint = new Node(p);
		   Node parentPoint = find(newPoint,root);
		   int cmp = parentPoint.compareTo(newPoint);
		   if(cmp == 0)
			   return;
		   else if(cmp == 1)
		   {
			   size ++;
			   parentPoint.lb = newPoint;
			   newPoint.layer = parentPoint.layer+1;
			   if(parentPoint.layer % 2 ==1)
				   newPoint.rect = new RectHV(parentPoint.rect.xmin(),parentPoint.rect.ymin(),
						   parentPoint.p.x(),parentPoint.rect.ymax());
			   else
				   newPoint.rect = new RectHV(parentPoint.rect.xmin(),parentPoint.rect.ymin(),
						   parentPoint.rect.xmax(),parentPoint.p.y());
			   
		   }
		   else
		   {
			   size ++;
			   parentPoint.rt = newPoint;
			   newPoint.layer = parentPoint.layer+1;
			   if(parentPoint.layer % 2 ==1)
				   newPoint.rect = new RectHV(parentPoint.p.x(),parentPoint.rect.ymin(),
						   parentPoint.rect.xmax(),parentPoint.rect.ymax());
			   else
				   newPoint.rect = new RectHV(parentPoint.rect.xmin(),parentPoint.p.y(),
						   parentPoint.rect.xmax(),parentPoint.rect.ymax());
		   }
		  
	   }// add the point to the set (if it is not already in the set)
	   
	   public boolean contains(Point2D p)
	   {
		   if(p == null)
			   throw new java.lang.IllegalArgumentException();
		   Node tmp = new Node(p);
		   Node answer = find(tmp,root);
		   if(answer.compareTo(tmp) == 0)
			   return true;
		   else 
			   return false;
	   }// does the set contain point p? 
	  /* public void draw()
	   {
		   		   
	   }// draw all points to standard draw */
	   private void searchRange(Queue<Point2D> q, Node root, RectHV rect)
	   {
		   if(root == null || !root.rect.intersects(rect))
			   return;
		   if(rect.contains(root.p))
			   q.enqueue(root.p);
		   searchRange(q,root.lb,rect);
		   searchRange(q,root.rt,rect);
	   }
	   public Iterable<Point2D> range(RectHV rect)
	   {
		   if(rect == null)
			   throw new java.lang.IllegalArgumentException();
		   Queue<Point2D> q = new Queue<Point2D>();
		   searchRange(q,root,rect);
		   return q;
	   }// all points that are inside the rectangle (or on the boundary) 
	   private void searchNearest(Node start,Point2D p)
	   {
		   if(start == null||start.rect.distanceSquaredTo(p)>distanceSquared)
			   return;
		   if(start.p.distanceSquaredTo(p)<distanceSquared)
		   {
			   distanceSquared = start.p.distanceSquaredTo(p);
			   nearestPoint = start.p;
		   }
		   searchNearest(start.lb,p);
		   searchNearest(start.rt,p);	   
	   }
	   public Point2D nearest(Point2D p)
	   {
		   if(p == null)
			   throw new java.lang.IllegalArgumentException();
		   distanceSquared = 5;
		   nearestPoint = null;
		   searchNearest(root,p);
		   return nearestPoint;
	   }// a nearest neighbor in the set to point p; null if the set is empty 

	   public static void main(String[] args)
	   {
	        // initialize the two data structures with point from file
		   String filename = "circle100.txt";
	        In in = new In(filename);
	        PointSET brute = new PointSET();
	        KdTree kdtree = new KdTree();
	        while (!in.isEmpty()) {
	            double x = in.readDouble();
	            double y = in.readDouble();
	            Point2D p = new Point2D(x, y);
	            kdtree.insert(p);
	            brute.insert(p);
	        }

	        double x0 = 0.0, y0 = 0.0;      // initial endpoint of rectangle
	        double x1 = 0.0, y1 = 0.0;      // current location of mouse
	        boolean isDragging = false;     // is the user dragging a rectangle

	        // draw the points
	        StdDraw.clear();
	        StdDraw.setPenColor(StdDraw.BLACK);
	        StdDraw.setPenRadius(0.01);
	        brute.draw();
	        StdDraw.show();

	        // process range search queries
	        StdDraw.enableDoubleBuffering();
	        while (true) {

	            // user starts to drag a rectangle
	            if (StdDraw.isMousePressed() && !isDragging) {
	                x0 = x1 = StdDraw.mouseX();
	                y0 = y1 = StdDraw.mouseY();
	                isDragging = true;
	            }

	            // user is dragging a rectangle
	            else if (StdDraw.isMousePressed() && isDragging) {
	                x1 = StdDraw.mouseX();
	                y1 = StdDraw.mouseY();
	            }

	            // user stops dragging rectangle
	            else if (!StdDraw.isMousePressed() && isDragging) {
	                isDragging = false;
	            }

	            // draw the points
	            StdDraw.clear();
	            StdDraw.setPenColor(StdDraw.BLACK);
	            StdDraw.setPenRadius(0.01);
	            brute.draw();

	            // draw the rectangle
	            RectHV rect = new RectHV(Math.min(x0, x1), Math.min(y0, y1),
	                                     Math.max(x0, x1), Math.max(y0, y1));
	            StdDraw.setPenColor(StdDraw.BLACK);
	            StdDraw.setPenRadius();
	            rect.draw();

	            // draw the range search results for brute-force data structure in red
	            StdDraw.setPenRadius(0.03);
	            StdDraw.setPenColor(StdDraw.RED);
	            for (Point2D p : brute.range(rect))
	                p.draw();

	            // draw the range search results for kd-tree in blue
	            StdDraw.setPenRadius(.02);
	            StdDraw.setPenColor(StdDraw.BLUE);
	            for (Point2D p : kdtree.range(rect))
	                p.draw();

	            StdDraw.show();
	            StdDraw.pause(20);
	        }

	    }// unit testing of the methods (optional) 
	   }

