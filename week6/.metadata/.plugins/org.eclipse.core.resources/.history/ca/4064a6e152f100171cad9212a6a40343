import edu.princeton.cs.algs4.In;
import edu.princeton.cs.algs4.BreadthFirstDirectedPaths;
import edu.princeton.cs.algs4.Digraph;
import edu.princeton.cs.algs4.StdIn;
import edu.princeton.cs.algs4.StdOut;
public class SAP {
   private Digraph myGragh;
   // constructor takes a digraph (not necessarily a DAG)


   public SAP(Digraph G)
   {
	   if(G == null)
		   throw new java.lang.IllegalArgumentException();
	   this.myGragh = G;
   }
   // length of shortest ancestral path between v and w; -1 if no such path
   public int length(int v, int w)
   {
	   BreadthFirstDirectedPaths bfsv = new BreadthFirstDirectedPaths(this.myGragh,v);
	   BreadthFirstDirectedPaths bfsw = new BreadthFirstDirectedPaths(this.myGragh,w);
	   int Shortestdis = Integer.MAX_VALUE;
	   for(int i=0;i < this.myGragh.V();i++)
	   {
		   if(bfsv.hasPathTo(i)&&bfsw.hasPathTo(i)&&bfsv.distTo(i)+bfsw.distTo(i)<Shortestdis)
		   {
			   Shortestdis = bfsv.distTo(i)+bfsw.distTo(i);
		   }		   
	   }
	   if(Shortestdis == Integer.MAX_VALUE)
		   return -1;
	   else
		   return Shortestdis;				  
   }
   // a common ancestor of v and w that participates in a shortest ancestral path; -1 if no such path
   public int ancestor(int v, int w)
   {
	   BreadthFirstDirectedPaths bfsv = new BreadthFirstDirectedPaths(this.myGragh,v);
	   BreadthFirstDirectedPaths bfsw = new BreadthFirstDirectedPaths(this.myGragh,w);
	   int Shortestdis = Integer.MAX_VALUE;
	   int ances = -1;
	   for(int i=0;i < this.myGragh.V();i++)
	   {
		   if(bfsv.hasPathTo(i)&&bfsw.hasPathTo(i)&&bfsv.distTo(i)+bfsw.distTo(i)<Shortestdis)
		   {
			   Shortestdis = bfsv.distTo(i)+bfsw.distTo(i);
			   ances = i;
		   }		   
	   }
	   return ances;	  
   }

   // length of shortest ancestral path between any vertex in v and any vertex in w; -1 if no such path
   public int length(Iterable<Integer> v, Iterable<Integer> w)
   {
	   BreadthFirstDirectedPaths bfsv = new BreadthFirstDirectedPaths(this.myGragh,v);
	   BreadthFirstDirectedPaths bfsw = new BreadthFirstDirectedPaths(this.myGragh,w);
	   int Shortestdis = Integer.MAX_VALUE;
	   for(int i=0;i < this.myGragh.V();i++)
	   {
		   if(bfsv.hasPathTo(i)&&bfsw.hasPathTo(i)&&bfsv.distTo(i)+bfsw.distTo(i)<Shortestdis)
		   {
			   Shortestdis = bfsv.distTo(i)+bfsw.distTo(i);
		   }		   
	   }
	   if(Shortestdis == Integer.MAX_VALUE)
		   return -1;
	   else
		   return Shortestdis;	
   }
   // a common ancestor that participates in shortest ancestral path; -1 if no such path
   public int ancestor(Iterable<Integer> v, Iterable<Integer> w)
   {
	   BreadthFirstDirectedPaths bfsv = new BreadthFirstDirectedPaths(this.myGragh,v);
	   BreadthFirstDirectedPaths bfsw = new BreadthFirstDirectedPaths(this.myGragh,w);
	   int Shortestdis = Integer.MAX_VALUE;
	   int ances = -1;
	   for(int i=0;i < this.myGragh.V();i++)
	   {
		   if(bfsv.hasPathTo(i)&&bfsw.hasPathTo(i)&&bfsv.distTo(i)+bfsw.distTo(i)<Shortestdis)
		   {
			   Shortestdis = bfsv.distTo(i)+bfsw.distTo(i);
			   ances = i;
		   }		   
	   }
	   return ances;	  
   }
   // do unit testing of this class
   public static void main(String[] args)
   {
	   In in = new In("digh1.txt");
	    Digraph G = new Digraph(in);
	    SAP sap = new SAP(G);//
	    
	    while (!StdIn.isEmpty()) 
	    {
	        int v = StdIn.readInt();
	        int w = StdIn.readInt();
	        int length   = sap.length(v, w);
	        int ancestor = sap.ancestor(v, w);
	        StdOut.printf("length = %d, ancestor = %d\n", length, ancestor);
	    }
   }
}

