import java.util.Arrays;
import edu.princeton.cs.algs4.*;
public class BruteCollinearPoints 
{
	private LineSegment[] resultsegements;
	private int n=0;
   public BruteCollinearPoints(Point[] points)
   {
	   if(points==null)
		   throw new java.lang.IllegalArgumentException();
	   LineSegment[] tmp = new LineSegment[points.length];
	   for(int p1=0;p1<points.length;p1++)
		   for(int p2=p1+1;p2<points.length;p2++)
			   for(int p3=p1+2;p3<points.length;p3++)
				   for(int p4=p1+3;p4<points.length;p4++)
				   {
					   if(points[p1].slopeTo(points[p2])==points[p1].slopeTo(points[p3])&&points[p1].slopeTo(points[p4])==points[p1].slopeTo(points[p2]))
					   {
						   tmp[n]=new LineSegment(points[p1],points[p4]);
						   n++;
					   }
				   }
	  resultsegements=new LineSegment[n];
	  for(int i=0;i<n;i++)
		  resultsegements[i]=tmp[i];  
   }// finds all line segments containing 4 points
   public  int numberOfSegments()
   {
	   return n;
   }// the number of line segments
   public LineSegment[] segments() 
   {
	   return resultsegements;
   }// the line segments
   public static void main(String[] args) {

	    // read the n points from a file
	    In in = new In("input8.txt");
	    int n = in.readInt();
	    Point[] points = new Point[n];
	    for (int i = 0; i < n; i++) {
	        int x = in.readInt();
	        int y = in.readInt();
	        points[i] = new Point(x, y);
	    }

	    // draw the points
	    StdDraw.enableDoubleBuffering();
	    StdDraw.setXscale(0, 32768);
	    StdDraw.setYscale(0, 32768);
	    for (Point p : points) {
	        p.draw();
	    }
	    StdDraw.show();

	    // print and draw the line segments
	    BruteCollinearPoints collinear = new BruteCollinearPoints(points);
	    for (LineSegment segment : collinear.segments()) {
	        StdOut.println(segment);
	        segment.draw();
	    }
	    StdDraw.show();
	}
}

